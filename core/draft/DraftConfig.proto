package proto;

message DraftConfig
{
    // Defined to support static version checking by files that include
    // this file.  The named value must be changed whenever compatibility-
    // breaking changes are made to this file.
    enum StaticVersionEnum { VERSION_3 = 0; }

    enum Direction
    {
        DIRECTION_CLOCKWISE         = 0;
        DIRECTION_COUNTER_CLOCKWISE = 1;
    }

    message CustomCardList
    {
        message CardQuantity
        {
            required uint32 quantity   = 1;
            required string name       = 2;
            required string set_code   = 3;
        }

        // Custom set name, i.e. "Johnny's Cube"
        required string       name            = 1;

        repeated CardQuantity card_quantities = 2;
    }

    // Encapsulates an entity that randomly dispenses cards from an
    // accumulation of booster packs or a custom list (such as a cube or
    // a complete set).
    message CardDispenser
    {
        // A filter description for include/exclude of certain cards.
        message Filter
        {
            enum FilterCategory
            {
                FILTER_CATEGORY_COLOR  = 0;
                FILTER_CATEGORY_NAME   = 1;
                FILTER_CATEGORY_RARITY = 2;
                FILTER_CATEGORY_TYPE   = 3;
            }

            enum FilterAction
            {
                FILTER_ACTION_EXCLUDE = 0;
                FILTER_ACTION_INCLUDE = 1;
            }

            required FilterCategory filter_category = 1;
            required FilterAction   filter_action   = 2;
            repeated string         values          = 3;
        }

        // List of standard set codes from known sets to add to dispenser.
        repeated string source_booster_set_codes      = 1;

        // Index of a custom card list to add to dispenser.
        optional uint32 source_custom_card_list_index = 2;

        // Filters are chained together.  A generated card must pass through
        // all filters in order to be dispensed.
        // IMPORTANT NOTE: when using filters, need to be very careful that
        // card generation is still possible!  If everything is filtered out
        // a generator could get into an endless loop!
        // (NOT YET SUPPORTED)
        repeated Filter filters                       = 3;
    }

    // A dispensation of cards from a dispenser.
    message CardDispensation
    {
        // Dispenser from which to dispense.
        required uint32 dispenser_index = 1;

        // Chairs (by index) that will receive the dispensation.  If empty,
        // implies all chairs.  May not be applicable for all draft types.
        repeated uint32 chair_indices   = 2;

        // Flag to dispense all items in the dispenser.
        optional bool   dispense_all    = 3 [default = false];

        // Number of items to get from the dispenser for this dispensation.
        // Ignored if 'dispense_all' is set.
        optional uint32 quantity        = 4 [default = 1];

        // Reset the dispenser (i.e. regenerate its contents) after
        // each dispensation.
        optional bool   reset_dispenser = 5 [default = false];
    }

    // Configuration for a booster-type draft round.
    message BoosterRound
    {
        // How to distribute cards to chairs.
        repeated CardDispensation dispensations      = 1;

        // Quantity of cards to be selected before passing.  If a pack
        // doesn't have enough cards, select them all.
        // If not present or invalid (zero), quantity is 1.
        optional uint32           selection_quantity = 2 [default = 1];

        // Time to make selection(s).  If not present or 0, selection time
        // is unlimited.
        optional uint32           selection_time     = 3;

        // Pass direction.
        required Direction        pass_direction     = 4;
    }

    // Configuration for a sealed-type draft round.
    // (Cards for chairs are auto-selected for each chair.)
    message SealedRound
    {
        // How to distribute cards to chairs.
        repeated CardDispensation dispensations = 1;
    }

    // Configuration for a Rochester-style draft round.  Configuration
    // assumes "snake"-style drafting.
    message RochesterRound
    {
        // Public cards at center of table.  The chair indices for these
        // dispensations is ignored, each dispensation is assumed to be
        // for the whole table.
        repeated CardDispensation dispensations           = 1;

        // Initial chair to select... (defaults to 0)
        optional uint32           initial_chair           = 2;

        // Initial pass direction.
        required Direction        initial_pass_direction  = 3;

        // Quantity of cards to be selected before passing.  If a pack
        // doesn't have enough cards, select them all.
        // If not present or invalid (zero), quantity is 1.
        optional uint32           selection_quantity      = 4;

        // Time to make selection(s).  If not present or 0, selection time
        // is unlimited.
        optional uint32           selection_time          = 5;
    }

    // Configuration for a Grid draft round.
    message GridRound
    {
        // Dispenser for public cards at center of table.  This will be
        // dispensed from until 9 cards are generated.
        required uint32  dispenser_index  = 1;

        // Initial chair to select a card.
        optional uint32  initial_chair    = 2 [default = 0];

        // Time to make selection(s).  If not present or 0, selection time
        // is unlimited.
        optional uint32  selection_time   = 3;
    }

    message Round
    {
        oneof round
        {
            BoosterRound   booster_round   = 1;
            SealedRound    sealed_round    = 2;
            RochesterRound rochester_round = 3;
            GridRound      grid_round      = 4;
        }

        // Optional post-round timer, time spent in round AFTER all
        // selections have been made.  If zero, no post-round timer.
        optional uint32  post_round_timer  = 5 [default = 0];

        // List of dispensers to be reset at end of round, if any.
        // (NOT YET SUPPORTED)
        repeated uint32  dispenser_indices_to_reset = 6;
    }

    required uint32         chair_count       = 1;
    repeated CustomCardList custom_card_lists = 2;
    repeated CardDispenser  dispensers        = 3;
    repeated Round          rounds            = 4;
}
